#!/usr/bin/env python3
import sys
import time
from socket import *

PRM = []  #Holds all Paxos instances
incomingConnections = [] #Maintains incoming connections
outgoingConnections = [] #Maintains outgoing connections
siteData = []  #Contains IP and Port of all sites in order of siteNum

class paxos(object):

    def __init__(self, numAccept, ballotNum = (0,0), acceptBallot = (0, 0), acceptVal = None, numVotes = 0):
        self.ballotNum = ballotNum
        self.acceptBallot = acceptBallot
        self.acceptVal = acceptVal   #File/Dictionary pair
        self.numVotes = numVotes
        self.numAccept = numAccept   

def printFiles(theList):
    #theList in this case is the PRM list
    for data in theList:
        print(data.acceptVal[0])  #Index 0 is the filename


def merge(theList):
    #theList in this case is the list of files
    words = dict()
    for filename in theList:
        with open(filename) as f:
            for line in f.readlines():
                currentLine = line.split()
                word = currentLine[0]
                count = int(currentLine[1])
                if(word in words.keys()):
                    oldCount = words.get(word)
                    newCount = int(oldCount + count)
                    words[word] = newCount
                else:
                    words[word] = count
    return words

def total(theList):
    totalCount = 0
    for filename in theList:
        with open(filename) as f:
            for line in f.readlines():
                currentLine = line.split()
                #word = currentLine[0]
                count = int(currentLine[1])
                totalCount += count
    return totalCount
    

#Initialize server
server = socket(AF_INET, SOCK_STREAM)
server.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)

mySiteid = sys.argv[1]   #ID of this site
setupFile = sys.argv[2]  #Setup file
print("Establishing connections...")
with open(setupFile) as f:
    numSites = f.readline().strip()   #Number of sites
    
    for i in range(int(numSites)):
        line = f.readline().strip().split()
        siteData.append([data for data in line])
    
    #print(siteData[int(mySiteid) - 1][1])
    server.bind(('', int(siteData[int(mySiteid) - 1][1])))
    server.listen(10)
    
    for line in f.readlines():
        #Establish Connections with other sites
        nums = line.strip().split()
        #print(mySiteid)
        #print(nums[0])
        if(nums[0] == mySiteid):
            ip = siteData[int(nums[1])-1][0]
            port = siteData[int(nums[1])-1][1]
            #print(ip)
            #print(port)
            s = socket(AF_INET, SOCK_STREAM)
            addr = (ip, int(port))
            time.sleep(5)
            try:
                s.connect(addr)
                print("Connected to ", (nums[1]))
            except error:
                time.sleep(2)
            #Add socket to outgoing connections
            outgoingConnections.append(s)
            #sys.stdout.write("Outgoing: ")
            #print(outgoingConnections)
        if(nums[1] == mySiteid):
            #Incoming connection
            conn, addr = server.accept()
            #print("Got connection from ", (nums[0]))
            incomingConnections.append(conn)
            #sys.stdout.write("Incoming: ")
            #print(incomingConnections)

#Receive the connection from the CLI
conn, addr = server.accept()
incomingConnections.append(conn)
print(conn)
print(addr)

#Open a connection with the CLI
cliPort = int(siteData[int(mySiteid) - 1][1]) + 3  #3 greater than the port of this site
cliIP = '127.0.0.1'
s = socket(AF_INET, SOCK_STREAM)
addr = (cliIP, cliPort)
time.sleep(5)
s.connect(addr)

#print(incomingConnections)
#print(outgoingConnections)

print("Ready to process commands...")

#files = ["file1.txt", "file2.txt", "file3.txt"]
#num = total(files)
#print(num)

#!/usr/bin/env python3
import sys
import time
import select
from socket import *

PRM = []  #Holds all Paxos instances
incomingConnections = dict() #Maintains incoming connections
outgoingConnections = dict() #Maintains outgoing connections
siteData = []  #Contains IP and Port of all sites in order of siteNum
ackList = []   #Contains acks received from other sites

class Paxos(object):

    def __init__(self, numAccept, ballotNum = (0, 0), acceptBallot = (0, 0),
                 acceptVal = ("-1", "-1"), numVotes = 1):
        self.ballotNum = ballotNum
        self.acceptBallot = acceptBallot
        self.acceptVal = acceptVal   #File/Dictionary pair
        self.numVotes = numVotes    #Starts at 1 cuz a process votes for itself
        self.numAccept = numAccept   

def printFiles(theList):
    #theList in this case is the PRM list
    for data in theList:
        print(data.acceptVal[0])  #Index 0 is the filename


def merge(theList):
    #theList in this case is the list of files
    words = dict()
    for filename in theList:
        with open(filename) as f:
            for line in f.readlines():
                currentLine = line.split()
                word = currentLine[0]
                count = int(currentLine[1])
                if(word in words.keys()):
                    oldCount = words.get(word)
                    newCount = int(oldCount + count)
                    words[word] = newCount
                else:
                    words[word] = count
    return words

def total(theList):
    totalCount = 0
    for filename in theList:
        with open(filename) as f:
            for line in f.readlines():
                currentLine = line.split()
                #word = currentLine[0]
                count = int(currentLine[1])
                totalCount += count
    return totalCount
    

def receive(channels):
    for i in range(0, len(channels)):
        sock = channels[i]
        ready = select.select([sock], [], [], 1)
        if(ready[0]):
            theData = sock.recv(1024).decode()
            splitData = theData.split("*")
            dataList = splitData[0].split()
            print(dataList)
            #for data in splitData:
            if(dataList[0].find("merge") != -1):
                print("merge")
            elif(dataList[0].find("total") != -1):
                print("total")
            elif(dataList[0].find("replicate") != -1):
                print("replicate")
            elif(dataList[0].find("stop") != -1):
                print("stop")
            elif(dataList[0].find("resume") != -1):
                print("resume")
            elif(dataList[0].find("print") != -1):
                print("print")
            elif(dataList[0].find("prepare") != -1):
                print("prepare")
                bal = dataList[1]    #Ballot
                siteid = dataList[2] #id of site it came from
                if(prmObj.ballotNum[0] < bal or prmObj.ballotNum[1] < siteid):
                    prmObj.ballotNum[0] = bal
                    prmObj.ballotNum[1] = siteid
                    toSend = "ack " + str(prmObj.ballotNum[0]) + " "  + str(prmObj.ballotNum[1]) + " " + str(prmObj.acceptBallot[0]) + " " + str(prmObj.acceptBallot[1]) + " " + prmObj.acceptVal[0] + " " + prmObj.acceptVal[1] + " "  + mySiteid + "*"
                    sock = outgoingConnections.get(ballotNum[1]) #Get socket associated w id
                    sock.sendall(toSend.encode())
            elif(dataList[0].find("ack") != -1):
                print("ack")
                #Check if site has acks from majority
                #If yes and all vals are null, then acceptVal = my initial proposed val
                #Else acceptVal = received val with highest ballot num
                #Send accept, ballotNum, acceptVal to all
            else:
                continue
    return

#Create prm object
prmObj = Paxos(0)


#Initialize server
server = socket(AF_INET, SOCK_STREAM)
server.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)

mySiteid = sys.argv[1]   #ID of this site
setupFile = sys.argv[2]  #Setup file
print("Establishing connections...")
with open(setupFile) as f:
    numSites = f.readline().strip()   #Number of sites
    
    for i in range(int(numSites)):
        line = f.readline().strip().split()
        siteData.append([data for data in line])
    
    #print(siteData[int(mySiteid) - 1][1])
    server.bind(('', int(siteData[int(mySiteid) - 1][1])))
    server.listen(10)
    
    for line in f.readlines():
        #Establish Connections with other sites
        nums = line.strip().split()
        #print(mySiteid)
        #print(nums[0])
        if(nums[0] == mySiteid):
            ip = siteData[int(nums[1])-1][0]
            port = siteData[int(nums[1])-1][1]
            #print(ip)
            #print(port)
            s = socket(AF_INET, SOCK_STREAM)
            addr = (ip, int(port))
            time.sleep(5)
            try:
                s.connect(addr)
                print("Connected to ", (nums[1]))
            except error:
                time.sleep(2)
            #Add socket to outgoing connections
            outgoingConnections[nums[1]] = s
            #sys.stdout.write("Outgoing: ")
            #print(outgoingConnections)
        if(nums[1] == mySiteid):
            #Incoming connection
            conn, addr = server.accept()
            #print("Got connection from ", (nums[0]))
            incomingConnections[nums[0]] = conn
            #sys.stdout.write("Incoming: ")
            #print(incomingConnections)

#Receive the connection from the CLI
conn, addr = server.accept()
incomingConnections["cli"] = conn
print(conn)
print(addr)

#Open a connection with the CLI
cliPort = int(siteData[int(mySiteid) - 1][1]) + 3  #3 greater than the port of this site
cliIP = '127.0.0.1'
s = socket(AF_INET, SOCK_STREAM)
addr = (cliIP, cliPort)
time.sleep(5)
s.connect(addr)
outgoingConnections["cli"] = s

#print(incomingConnections)
#print(outgoingConnections)

print("Ready to process commands...")
while(True):
    receive(incomingConnections)
    
#files = ["file1.txt", "file2.txt", "file3.txt"]
#num = total(files)
#print(num)

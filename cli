#!/usr/bin/env python3
import sys
import time
import select
from socket import *

#2nd and 3rd arguments will be ports of mappers.
#4th argument will be port of reducer.

#map1Port = sys.argv[2]
#map2Port = sys.argv[3]
#reducerPort = sys.argv[4]

myIncomingConnections = dict()
myOutgoingConnections = dict()

def receive(channels):
    for c in channels.keys():
        sock = channels.get(c)
        ready = select.select([sock], [], [], 1)
        if(ready[0]):
            theData = sock.recv(1024).decode()
            print(theData)
    return


#Connect to PRM
ip = '127.0.0.1'
myPort = sys.argv[1] #First argument is port of CLI
prmPort = sys.argv[2] #Second argument is port of PRM for this CLI
sock = socket(AF_INET, SOCK_STREAM)
addr = (ip, int(prmPort))
time.sleep(5)
print("Connecting to PRM...")
sock.connect(addr)
myOutgoingConnections["prm"] = sock
print("Connected")

#Initialize server for PRM
server = socket(AF_INET, SOCK_STREAM)
server.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
server.bind(('', int(myPort)))
server.listen(10)
print("Receiving connection from PRM...")
conn, addr = server.accept()
myIncomingConnections["prm"] = conn
print("Connection received")

#print(myIncomingConnections)
#print(myOutgoingConnections)

#Call receive after every command instead of running a thread in the background
            

#Set up command line interface
for line in sys.stdin:
    theLine = line.split()

    if(theLine[0] == "map"):
        #Map function, send to one of the mappers
        if(len(theLine) != 4):
            print("Usage: map [file] [offset] [size]")
            continue
        fname = theLine[1]
        offset = theLine[2]
        size = theLine[3]
        
    elif(theLine[0] == "reduce"):
        #Reduce funciton, send to reducer
        if(len(theLine) < 2):
            print("Usage: reduce [fname1] [fname2] ...")
            continue
        files = ""
        for i in range(1, len(theLine)):
            files += theLine[i] + " "
        files += "*"
        #SomeSocket.sendall(files.encode())
        
    elif(theLine[0] == "replicate"):
        #Replicate funciton, send to PRM
        if(len(theLine) != 2):
            print("Usage: replicate [filename]")
            continue
        fname = theLine[1]
        data = "replicate " + fname + "*"
        sock.sendall(data.encode())  #Send a replicate
        time.sleep(5)
        receive(myIncomingConnections)
        
    elif(theLine[0] == "stop"):
        #Stop function, send to PRM
        if(len(theLine) != 1):
            print("Usage: stop")
            continue
        sock.sendall("stop*".encode())  #Send a stop msg
        time.sleep(1)
        receive(myIncomingConnections)
        
    elif(theLine[0] == "resume"):
        #Resume function, send to PRM
        if(len(theLine) != 1):
            print("Usage: resume")
            continue
        sock.sendall("resume*".encode())
        time.sleep(1)
        receive(myIncomingConnections)
        
    elif(theLine[0] == "total"):
        #Total function, send to PRM
        if(len(theLine) < 2):
            print("Usage: total [pos1] [pos2] ...")
            continue
        data = "total "
        for i in range(1, len(theLine)):
            data += theLine[i] + " "
        data += "*"
        sock.sendall(data.encode())
        time.sleep(1)
        receive(myIncomingConnections)
            
    elif(theLine[0] == "print"):
        #Print funciton, send to PRM
        if(len(theLine) != 1):
            print("Usage: print")
            continue
        sock.sendall("print*".encode())
        time.sleep(1)
        receive(myIncomingConnections)

    elif(theLine[0] == "merge"):
        #Merge function, send to PRM
        if(len(theLine) != 3):
            print("Usage: merge [pos1] [pos2]")
            continue
        f1 = theLine[1]
        f2 = theLine[2]
        data = "merge " + f1 + " " + f2 + "*" 
        sock.sendall(data.encode())
    else:
        print("Command not recognized. Make sure commands don't include capital letters")
        continue
